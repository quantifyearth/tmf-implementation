# Take the run step name
## Make the dir on /maps/$USER/rerunner/

# Parse the sexp

# (run (rom (((kind (Build (f2f97d72c95acef858a61e9aeed1348598db9a59a470f8bd97a57604666b2d5f /home/tmf/app/data))) (target /data/f2f97d72c95acef858a61e9aeed1348598db9a59a470f8bd97a57604666b2d5f)) ((kind (Build (bc0962fff8c4bbc0b6a4de0dd956f28d18a6b36eb9b5f2bb06e01db1f2c6dadc /home/tmf/app/data))) (target /data/bc0962fff8c4bbc0b6a4de0dd956f28d18a6b36eb9b5f2bb06e01db1f2c6dadc)) ((kind (Build (445690f6760bd88652946b463ffa810575d131546984ca7eb23e4feb29d26f3a /home/tmf/app/data))) (target /data/445690f6760bd88652946b463ffa810575d131546984ca7eb23e4feb29d26f3a)) ((kind (Build (5be243c63606222238d2966f7d4f23f8623f77f725e1d76f7a837e9796fea482 /home/tmf/app/data))) (target /data/5be243c63606222238d2966f7d4f23f8623f77f725e1d76f7a837e9796fea482)) ((kind (Build (9cb71ae33dd173deaecccbda4204059ed34a93d8ed236892ce640672d949cc9d /home/tmf/app/data))) (target /data/9cb71ae33dd173deaecccbda4204059ed34a93d8ed236892ce640672d949cc9d)) ((kind (Build (23c649863fa7c9974e81dd8f667ccfca59515216a6789766e2377022464b7a7c /home/tmf/app/data))) (target /data/23c649863fa7c9974e81dd8f667ccfca59515216a6789766e2377022464b7a7c)) ((kind (Build (5481606a68542af56112dd3dfc47dd18fad4d0dd0f4e556081687157209df6ed /home/tmf/app/data))) (target /data/5481606a68542af56112dd3dfc47dd18fad4d0dd0f4e556081687157209df6ed)) ((kind (Build (e88cf32eb1663352c1763d5d13c7354f16e3f5eab33cb21089afb5c03f92c471 /home/tmf/app/data))) (target /data/e88cf32eb1663352c1763d5d13c7354f16e3f5eab33cb21089afb5c03f92c471))))
#                    (shell "python -m methods.matching.find_potential_matches --k ./inputs/1201-k.parquet --matching ./inputs/1201-matching-area.geojson --start_year 2012 --evaluation_year 2021 --jrc ./inputs/jrc/tif/products/tmf_v1/AnnualChange --cpc ./inputs/cpc --ecoregions ./inputs/ecoregions.tif --elevation ./inputs/srtm_tif --slope ./inputs/slope --access ./inputs/accessibility_tiles -j 30 --output ./data/1201-matches.parquet"))


# Output the dir copy lines
## Filter out JRC
## Link JRC if needed

# Find the command
## Rewrite ./input/ and ./data/

# Run with arkpython3






























def main():
    # If you use the default multiprocess model then you risk deadlocks when logging (which we
    # have hit). Spawn is the default on macOS, but not on Linux.
    set_start_method("spawn")

    parser = argparse.ArgumentParser(description="Takes K and S and finds 100 sets of matches.")
    parser.add_argument(
        "--k",
        type=str,
        required=True,
        dest="k_filename",
        help="Parquet file containing pixels from K as generated by calculate_k.py"
    )
    parser.add_argument(
        "--s",
        type=str,
        required=True,
        dest="s_filename",
        help="Parquet file containing pixels from S as generated by find_potential_matches.py"
    )
    parser.add_argument(
        "--start_year",
        type=int,
        required=True,
        dest="start_year",
        help="Year project started."
    )
    parser.add_argument(
        "--seed",
        type=int,
        required=True,
        dest="seed",
        help="Random number seed, to ensure experiments are repeatable."
    )
    parser.add_argument(
        "--output",
        type=str,
        required=True,
        dest="output_directory_path",
        help="Directory into which output matches will be written. Will be created if it does not exist."
    )
    parser.add_argument(
        "-j",
        type=int,
        required=False,
        default=round(cpu_count() / 2),
        dest="processes_count",
        help="Number of concurrent threads to use."
    )
    args = parser.parse_args()

    find_pairs(
        args.k_filename,
        args.s_filename,
        args.start_year,
        args.seed,
        args.output_directory_path,
        args.processes_count
    )

if __name__ == "__main__":
    main()