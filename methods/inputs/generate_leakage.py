import argparse
import sys

import shapely # type: ignore
from geopandas import gpd # type: ignore

from methods.common.geometry import expand_boundaries

LEAKAGE_BUFFER_IN_METRES = 5_000

def generate_leakage(input_filename: str, output_filename: str) -> None:
    project_boundaries = gpd.read_file(input_filename)
    expanded = expand_boundaries(project_boundaries, LEAKAGE_BUFFER_IN_METRES)

    # the shape generated by expand_boundaries is simplied, so to subtract them
    # we need to do the same, otherwise geopandas will be upset when it calculates
    # the difference ("The indices of the two GeoSeries are different.")
    simplified_boundaries = shapely.unary_union(project_boundaries.geometry)
    leakage = expanded.difference(simplified_boundaries)
    leakage.to_file(output_filename, driver="GeoJSON")

def main() -> None:
    parser = argparse.ArgumentParser(description="Generates leakage shape for a project")
    parser.add_argument(
        "--project",
        type=str,
        required=True,
        dest="project_boundary_filename",
        help="GeoJSON File of project boundary."
    )
    parser.add_argument(
        "--output",
        type=str,
        required=True,
        dest="output_filename",
        help="GeoJSON File of project leakage."
    )
    args = parser.parse_args()

    try:
        generate_leakage(args.project_boundary_filename, args.output_filename)
    except FileNotFoundError as exc:
        print(f"Failed to find file {exc.filename}: {exc.strerror}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
